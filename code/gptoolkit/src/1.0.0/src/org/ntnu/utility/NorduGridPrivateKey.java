/**
 * This file is subject to the GNU General Public License (GPL)
 * (http://www.gnu.org/copyleft/gpl.html)
 */

package org.ntnu.utility;


import java.io.*;
import java.util.*;

import java.security.*;

import java.security.spec.PKCS8EncodedKeySpec;

import org.bouncycastle.util.encoders.Base64;

import org.globus.gsi.bc.BouncyCastleOpenSSLKey;
import org.globus.gsi.OpenSSLKey;


/**
 * A class to manage a private key.
 *
 * @author Martin Matusiak
 */
class NorduGridPrivateKey {

	private PrivateKey privatekey;
	private OpenSSLKey opensslkey;
	
	protected boolean populated = false;
	
	
	public boolean isPopulated() {
		return populated;
	}
	
	
	public PrivateKey getPrivateKey() {
		return privatekey;
	}
	
	
	public OpenSSLKey getOpenSSLKey() {
		return opensslkey;
	}
	

	public boolean readFromFile(String filepath) {
	
		try {
			
			if (readPKCS1format(filepath)) return true;
			
			//if (readPKCS8format(filepath)) return true;
			

		} catch (Exception e) {
			//e.printStackTrace();
			return false;
		}

		populated = true;
    return false;
	}
	
	
/**
 * This method is broken and does not work with any of the PKCS8-format
 * keys I've tried to read.
 */	
	private boolean readPKCS8format(String filename) {

		try {

			FileInputStream fis = new FileInputStream(filename);
			DataInputStream dis = new DataInputStream(fis);
			
			byte [] kbytes = new byte [dis.available()];
			dis.readFully(kbytes);
			
			PKCS8EncodedKeySpec kspec = new PKCS8EncodedKeySpec(kbytes);
			KeyFactory kf = KeyFactory.getInstance("RSA");
			
			privatekey = (PrivateKey) kf.generatePrivate(kspec);
		
		} catch (Exception e) {
			//e.printStackTrace();
			return false;
		}
			
		return true;
	}
	
	
/**
 * This method is used to read the keys generated by the application,
 * this is the standard way of using private keys in jglobus.
 */
	private boolean readPKCS1format(String filename) {
	
		try {
		
			// Now Generate the Cerificate
			// OpenSSLKey key = new BouncyCastleOpenSSLKey(fileName);
			opensslkey = new BouncyCastleOpenSSLKey(filename);
			// decrypt ca priv key
/*			if (opensslkey.isEncrypted()) {

			/*	if (caPassword == null) {
					throw new GeneralSecurityException(
						"A CA password is required");
					}
					opensslkey.decrypt("carlton");

			}
		*/
			if (!opensslkey.isEncrypted())
				// returns null if key is encrypted
				privatekey = opensslkey.getPrivateKey();

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
			
		return true;
	}


}